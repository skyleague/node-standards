/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as PackageConfigurationValidator } from './schemas/package-configuration.schema.js'

export interface PackageConfiguration {
    extends: [string, ...string[]] | string
    ignorePatterns?: string[] | undefined
    rules?:
        | {
              publishConfig?: boolean | undefined
              license?: boolean | undefined
              engines?: boolean | undefined
              files?: boolean | undefined
              dependencies?: boolean | undefined
              devDependencies?: boolean | undefined
              scripts?: boolean | undefined
              packageType?: boolean | undefined
              exports?: boolean | undefined
              types?: boolean | undefined
              main?: boolean | undefined
              workspaces?: boolean | undefined
          }
        | undefined
    projectSettings?:
        | {
              [k: string]: string | undefined
          }
        | undefined
}

export const PackageConfiguration = {
    validate: PackageConfigurationValidator as ValidateFunction<PackageConfiguration>,
    get schema() {
        return PackageConfiguration.validate.schema
    },
    get errors() {
        return PackageConfiguration.validate.errors ?? undefined
    },
    is: (o: unknown): o is PackageConfiguration => PackageConfiguration.validate(o) === true,
    parse: (o: unknown): { right: PackageConfiguration } | { left: DefinedError[] } => {
        if (PackageConfiguration.is(o)) {
            return { right: o }
        }
        return { left: (PackageConfiguration.errors ?? []) as DefinedError[] }
    },
} as const
